/**
 * Created by root on 6/22/16.
 */
var express = require('express');
var router = express.Router();
var azure = require('./helper/azure');
var validator = require('./helper/validator');
var db = require('./helper/db');
var async = require('async');
var pushController = require('./helper/send_push');
var chatController = require('./chatController');

/**
 * @api {POST} http://40.69.32.246:3000/users/registerDeviceToken A. Register user device token for push
 * @apiVersion 0.1.0
 * @apiName HTTP Token
 * @apiGroup User
 *
 * @apiParam {String} device_token Device token generated by azure sdk
 * @apiParam {String} user_id   User ID
 * @apiSuccess {Boolean} error=false Value will be true/false
 * @apiSuccess {String} message response message
 * @apiSuccessExample Success Response:
 *    {
 *        error: false,
 *        message: "Success"
 *    }
 *
 * @apiError {Boolean} error=true
 * @apiError {String} message
 */

router.post('/registerDeviceToken', function (req, res){
    if(validator.isMissing(req.body.device_token)){
        return res.status(404).send({error: false, message: "Missing device_token"});
    }
    if(validator.isMissing(req.body.user_id)){
        return res.status(404).send({error: false, message: "Missing user_id"});
    }
    var token = req.body.device_token;

    findDeviceTagWithUser(function (err, result){
        if(err) return res.status(500).send({error : true, message: err});
        if(result.hasUserAndTag === false){
            insertDeviceTag(result.tag, function (err, resp){
                if(err) return res.status(500).send(err);
                res.status(200).send(resp);
            })
        }else{
            res.status(200).send({error : false, message: "Success"});
        }
    });

    function insertDeviceTag(tag, cb){
        async.waterfall([
            function (done){
                if(tag){
                    done(null, tag);
                }else {
                    azure.apns.createNativeRegistration(token, token, function (err, response){
                        if(err) return done({error: true, err: err});
                        if(response){
                            done(null, response.Tags);
                        }
                    });
                }
            }, function (tag, done){
                var query = "INSERT INTO `push_tag` SET";
                query += " " + "`user_id`=" + db.escape(req.body.user_id);
                query += " " + ", `tag`=" + db.escape(tag);

                db.query(query, function (err, result){
                    if (err) {
                        console.log(err);
                        if (err.code === 'ER_DUP_ENTRY') {
                            return done(null, {error: false, message: "Success"});
                        }else {
                            return done({error: true, err: err}, null);
                        }
                    }
                    if(result.insertId > 0){
                        done(null, {error : false, message: "Success"});
                    }else{
                        done({error : true, message: "Failed"});
                    }
                });
            }
        ], cb);
    }
    function findDeviceTagWithUser(cb){
        var result = {
            hasUserAndTag : false
        };
        async.parallel([
            function (done){
                var query = "SELECT `tag` FROM `push_tag`";
                query += " " + "WHERE `user_id`=" + db.escape(req.body.user_id);
                query += " " + ", `tag`=" + db.escape(token);

                db.query(query, function (err, tags){
                    if(err) return done(err);
                    if(tags){
                        if(tags.length){
                            result.hasUserAndTag = true;
                        }
                    }
                    done();
                });
            }, function(done){
                var query = "SELECT `tag` FROM `push_tag`";
                query += " " + "WHERE `tag`=" + db.escape(token);

                db.query(query, function (err, tags){
                    if(err) return done(err);
                    if(tags){
                        if(tags.length){
                            result.tag = tags[0];
                        }
                    }
                    done();
                });
            }
        ], function(ers){
            if(ers && ers.length){
                cb(err, null);
            }else{
                cb(null, result);
            }
        });
    }
});

router.get('/testPush', pushController.testPush);

/**
 * @api {POST} http://40.69.32.246:3000/users/addUserToEvent B. Register user to event to enable chat with other users
 * @apiVersion 0.1.0
 * @apiName HTTP add user
 * @apiGroup User
 *
 * @apiParam {String} user_id Id of user that joined the event
 * @apiParam {String} eventChat_id Id of event user want to join
 * @apiSuccess {Boolean} error=false Value will be true/false
 * @apiSuccess {String} message Success response
 * @apiSuccessExample Acknowledgement:
 *    {
 *        error: false,
 *        message: "success"
 *    }
 *
 * @apiError error=true
 */
router.post('/addUserToEvent', function (req, res){
    if(validator.isMissing(req.body.user_id)){
        return res.status(404).send({error: true, message: "Missing user_id"});
    }
    if(validator.isMissing(req.body.eventChat_id)){
        return res.status(404).send({error: true, message: "Missing eventChat_id"});
    }
    var data = {
        user_id: req.body.user_id,
        eventChat_id: req.body.eventChat_id
    };
    chatController.addUserToEvent(data, function (resp){
        if(resp.error == true){
            res.status(400).send(resp);
        }else{
            res.json(resp);
        }
    });
});

/**
 * @api {POST} http://40.69.32.246:3000/users/registerEvent C. Register event
 * @apiVersion 0.1.0
 * @apiName HTTP register event
 * @apiGroup User
 *
 * @apiParam {String} event_id Event id
 * @apiParam {String} user_id Id of user who owns the event
 * @apiSuccess {Boolean} error=false Value will be true/false
 * @apiSuccess {String} chatHead Conversation Id
 * @apiSuccessExample Success Response:
 *    {
 *        error: false,
 *        eventChat: 10
 *    }
 *
 * @apiError error=true
 */
router.post('/registerEvent', function(req, res){
    if(validator.isMissing(req.body.user_id)){
        return res.status(404).send({error: true, message: "Missing user_id"});
    }
    if(validator.isMissing(req.body.event_id)){
        return res.status(404).send({error: true, message: "Missing eventChat_id"});
    }
    var data = {
        user_id: req.body.user_id,
        event_id: req.body.event_id
    };
    chatController.registerEventForChat(data, function(resp){
        if(resp.error == true){
            res.status(400).send(resp);
        }else{
            res.json(resp);
        }
    })
});

module.exports = router;